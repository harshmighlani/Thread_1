package sapient;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class MatrixCalThread {

	public static void main(String[] args) throws InterruptedException,
			ExecutionException {

		int totalSum = 0;
		int[][] matrix = new int[3][3];

		CountDownLatch latch = new CountDownLatch(matrix.length);
		for (int a = 0; a < matrix.length; a++) {
			for (int b = 0; b < matrix[0].length; b++) {
				matrix[a][b] = 4 + (a * 2 + b * 3);
			}
		}

		ExecutorService executor = Executors
				.newFixedThreadPool(matrix[0].length);
		WorkerThread1 work = null;
		for (int i = 0; i < matrix.length; i++)
			try {
				work = new WorkerThread1(i, matrix, latch);
				executor.submit(work);
				totalSum += work.getSum();
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		executor.shutdown();
		latch.await();
		while (!executor.isTerminated()) {

		}
		System.out.println("Finished all threads" + totalSum);
	}

}
