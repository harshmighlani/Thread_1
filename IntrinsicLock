package testThread;

import java.util.LinkedList;


public class Processor_IntrinsicLock {

	int limit =10;
	LinkedList<Integer> linkedList = new LinkedList<Integer>();

	private Object lockObject = new Object();



	public void produce() throws InterruptedException
	{
		int val =0;
		while(true){
			synchronized (lockObject) {
				while(linkedList.size()== limit)
				{
					lockObject.wait();
				}
				int value = val++;
				linkedList.add(value);
				System.out.println("value: "+value + " added");
				lockObject.notify();
			}
			Thread.sleep(500);
		}
	}

	public void consume() throws InterruptedException
	{
		while(true)
		{
			synchronized (lockObject) {
				while(linkedList.size()==0)
				{
					lockObject.wait();
				}
				int val = linkedList.removeFirst();
				System.out.println("removed: "+val+ " removed");
				lockObject.notify();
			}
			Thread.sleep(500);	
		}
	}
}
